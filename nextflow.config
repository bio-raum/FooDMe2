params {

    input                   = null
    outdir                  = "results"

    help                    = false
    list_primers            = false
    list_dbs                = false

    reference_base          = null
    reference_version       = "1.0"
    
    primer_set              = null
    primers_txt             = null
    primers_fa              = null
    gene                    = null

    disable_low_complexity  = false
    blast_low_complexity    = "-dust no -soft_masking false"
    blast_evalue            = "1e-20"
    blast_qcov              = "100"
    blast_perc_id           = "97"
    blast_bitscore_diff     = 4
    blast_min_consensus     = 0.51
    
    taxid_filter            = 2759      // Default is Eukaryota
    blocklist               = "${baseDir}/assets/blocklist.txt"
    
    vsearch                 = false    // use VSEARCH instead of DADA
    
    vsearch_min_cov         = 5
    vsearch_cluster_id      = 0.97
    
    max_mismatch            = 1
    remove_chimera          = true
    amplicon_min_length     = 70
    amplicon_max_length     = 100
    max_expected_errors     = 2
    max_ns                  = 0
    cluster_method          = "asv"
    merging_max_mismatch    = 1
    
    pacbio                  = false
    iontorrent              = false
    ont                     = false

    options                 = false
    
    cutadapt                = false
    cutadapt_trim_3p        = false
    cutadapt_options        = "-m 40"

    build_references        = false
    skip_genbank            = false

    logo                    = "${baseDir}/assets/pipelinelogo.png"
    run_name                = null

    plaintext_email         = false
    skip_multiqc            = false
    email                   = false

    conda.enabled           = false
    singularity.enabled     = false
    docker.enabled          = false
    apptainer.enabled       = false
    podman.enabled          = false

    max_memory              = 16.GB
    max_cpus                = 8
    max_time                = 240.h
    maxMultiqcEmailFileSize = 25.MB

    publish_dir_mode        = "copy"

    custom_config_base      = "https://raw.githubusercontent.com/marchoeppner/nf-configs/main"

}

manifest {
    name = "bio-raum/FooDMe2"
    version = "0.2"
    description = "FooDMe2 Pipeline | Profiling eukaryotic taxa from mitochondrial amplicons"
    author = "Gregoire Denay and Marc Hoeppner"
    homePage = "https://github.com/bio-raum/FooDMe2"
    nextflowVersion = "23.10.1"
}

process.shell = ['/bin/bash', '-euo', 'pipefail']

timeline {
    overwrite = true
    enabled = true
    file = "${params.outdir}/pipeline_info/pipeline_timeline.html"
}
report {
    overwrite = true
    enabled = true
    file = "${params.outdir}/pipeline_info/pipeline_report.html"
}
trace {
    overwrite = true
    enabled = true
    file = "${params.outdir}/pipeline_info/pipeline_trace.txt"
}
dag {
    overwrite = true
    enabled = true
    file = "${params.outdir}/pipeline_info/pipeline_dag.svg"
}

// Load centrally stored profiles
try {
    includeConfig "${params.custom_config_base}/custom.config"
} catch (Exception e) {
    System.err.println("WARNING: Could not load remote pipeline profiles: ${params.custom_config_base}/custom.config")
}

// Primer options to pre-set / override some defaults
includeConfig 'conf/primers.config'

// Load the default config files
includeConfig 'conf/base.config'
includeConfig 'conf/resources.config'

profiles {

    docker { 
        docker.enabled = true 
    }
    singularity {
        singularity.enabled = true
        singularity.autoMounts = true 
        singularity.runOptions = "-B /home -B /mnt"
    }
    podman {
        podman.enabled = true
    }
    conda {
        conda.enabled = true
    }
    apptainer {
        apptainer.enabled = true
    }
    test {
        includeConfig 'conf/test.config'
    }
}

/* 
Pre-set some options based on a pre-configured primer set
*/
if (params.primer_set && params.primers.keySet().contains(params.primer_set)) {
    params.max_expected_errors  = params.primers[params.primer_set].maxee
    params.amplicon_max_length  = params.primers[params.primer_set].maxlen
    params.amplicon_min_length  = params.primers[params.primer_set].minlen
    params.taxid_filter         = params.primers[params.primer_set].taxid_filter
    params.cutadapt             = params.primers[params.primer_set].cutadapt
    params.cutadapt_trim_3p     = params.primers[params.primer_set].cutadapt_trim_3p
}

// Module-specific configuration options
includeConfig 'conf/modules.config'
includeConfig 'conf/modules/dada2.config'
includeConfig 'conf/modules/vsearch.config'
includeConfig 'conf/modules/build_references.config'

// Function to ensure that resource requirements don't go beyond
// a maximum limit
def check_max(obj, type) {
    if(type == 'memory'){
        try {
            if(obj.compareTo(params.max_memory as nextflow.util.MemoryUnit) == 1)
                return params.max_memory as nextflow.util.MemoryUnit
            else
                return obj
        } catch (all) {
            println "   ### ERROR ###   Max memory '${params.max_memory}' is not valid! Using default value: $obj"
            return obj
        }
    } else if(type == 'time'){
        try {
            if(obj.compareTo(params.max_time as nextflow.util.Duration) == 1)
                return params.max_time as nextflow.util.Duration
            else
                return obj
        } catch (all) {
            println "   ### ERROR ###   Max time '${params.max_time}' is not valid! Using default value: $obj"
            return obj
        }
    } else if(type == 'cpus'){
        try {
            return Math.min( obj, params.max_cpus as int )
        } catch (all) {
            println "   ### ERROR ###   Max cpus '${params.max_cpus}' is not valid! Using default value: $obj"
            return obj
        }
    }
}

