process {
    withName: CUTADAPT {
        ext.args = params.cutadapt_options
        publishDir = [
            path: { "${params.outdir}/cutadapt" },
            mode: params.publish_dir_mode,
            enabled: params.store_reads,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ] 
    }
    withName: 'FASTP_METRICS' {
        ext.suffix = "adaptertrim"
        publishDir = [
            path: { "${params.outdir}/FASTP_metrics" },
            mode: params.publish_dir_mode,
            enabled: params.store_reads
        ]
    }
    withName: FASTPLONG_METRICS {
        ext.suffix = "adaptertrim"
        ext.args = "-Q" // do not trim by quality, that happens later. 
        publishDir = [
            path: { "${params.outdir}/FASTP_metrics" },
            mode: params.publish_dir_mode,
            enabled: params.store_reads
        ]
    }
    withName: FASTPLONG_TRIM {
        ext.args = "-q ${params.ont_reads_min_q} -l ${params.amplicon_min_length} --length_limit ${params.amplicon_max_length}"
        publishDir = [
            path: { "${params.outdir}/FASTP_trimming" },
            mode: params.publish_dir_mode,
            enabled: params.store_reads
        ]
    }
    withName: 'FASTP_TRIM' {
        ext.args = params.fastp_options
        publishDir = [
            path: { "${params.outdir}/FASTP_trimming" },
            mode: params.publish_dir_mode,
            enabled: params.store_reads
        ]
    }
    withName: FASTX_REVERSE_COMPLEMENT {
        publishDir = [
            path: { "${params.outdir}/cutadapt" },
            mode: params.publish_dir_mode,
            enabled: false,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]
    }
}