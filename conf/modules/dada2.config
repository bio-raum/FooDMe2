process {
    
    withName: DADA2_ERROR { 
        // 'nbases = 1e8, nreads = NULL, randomize = TRUE, MAX_CONSIST = 10, OMEGA_C = 0, qualityType = "Auto"',
        ext.args = [
            params.pacbio ? "errorEstimationFunction = PacBioErrfun" : "errorEstimationFunction = loessErrfun"
        ].join(',').replaceAll('(,)*$', "")
        publishDir = [
            path: { "${params.outdir}/samples/${meta.sample_id}/DADA2" },
            mode: params.publish_dir_mode,
            enabled: true,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]
    }
    withName: DADA2_DENOISING {
        ext.args = [
            ( params.iontorrent || params.ont ) ? "BAND_SIZE = 32, HOMOPOLYMER_GAP_PENALTY = -1" : "BAND_SIZE = 16, HOMOPOLYMER_GAP_PENALTY = NULL"
        ].join(',').replaceAll('(,)*$', "")
        // 'selfConsist = FALSE, priors = character(0), DETECT_SINGLETONS = FALSE, GAPLESS = TRUE, GAP_PENALTY = -8, GREEDY = TRUE, KDIST_CUTOFF = 0.42, MATCH = 5, MAX_CLUST = 0, MAX_CONSIST = 10, MIN_ABUNDANCE = 1, MIN_FOLD = 1, MIN_HAMMING = 1, MISMATCH = -4, OMEGA_A = 1e-40, OMEGA_C = 1e-40, OMEGA_P = 1e-4, PSEUDO_ABUNDANCE = Inf, PSEUDO_PREVALENCE = 2, SSE = 2, USE_KMERS = TRUE, USE_QUALS = TRUE, VECTORIZED_ALIGNMENT = TRUE',
        // setting from https://rdrr.io/bioc/dada2/man/mergePairs.html & https://rdrr.io/bioc/dada2/man/nwalign.html & match = getDadaOpt("MATCH"), mismatch = getDadaOpt("MISMATCH"), gap = getDadaOpt("GAP_PENALTY"), missing from the list below is: 'band = -1'
        ext.args2 = [
            "maxMismatch = ${params.merging_max_mismatch}"
        ].join(',').replaceAll('(,)*$', "")
        // "minOverlap = 12, maxMismatch = ${params.merging_max_mismatch}, returnRejects = FALSE, propagateCol = character(0), trimOverhang = FALSE, match = 1, mismatch = -64, gap = -64, homo_gap = NULL, endsfree = TRUE, vec = FALSE"

        publishDir = [
            path: { "${params.outdir}/samples/${meta.sample_id}/DADA2" },
            mode: params.publish_dir_mode,
            enabled: true,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]
    }
    withName: DADA2_FILTNTRIM {
        ext.args = "maxN=${params.max_ns}, maxEE=${params.max_expected_errors}"
        publishDir = [
            path: { "${params.outdir}/samples/${meta.sample_id}/DADA2" },
            mode: params.publish_dir_mode,
            enabled: false,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]
    }
    withname: DADA_FILTERSIZE{
        ext.args = "maxLen=${params.amplicon_max_length}, minLen=${params.amplicon_min_length}"
        publishDir = [
            path: { "${params.outdir}/samples/${meta.sample_id}/DADA2" },
            mode: params.publish_dir_mode,
            enabled: false,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]
    }
    withName: DADA2_RMCHIMERA {
        ext.args = 'method="per-sample"'
        publishDir = [
            path: { "${params.outdir}/samples/${meta.sample_id}/DADA2" },
            mode: params.publish_dir_mode,
            enabled: true,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]
    }
    withName: 'HELPER_SEQTABLE_TO_FASTA' {
        publishDir = [
            path: { "${params.outdir}/samples/${meta.sample_id}/DADA2" },
            mode: params.publish_dir_mode,
            enabled: true,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]
    }

}