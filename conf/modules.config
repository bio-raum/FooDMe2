process {

    publishDir = [
        path: { "${params.outdir}/${task.process.tokenize(':')[-1].tokenize('_')[0].toLowerCase()}" },
        mode: params.publish_dir_mode,
        enabled: true,
        saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
    ]
    withName: 'HELPER_SAMPLE_REPORT' {
        publishDir = [
            path: { "${params.outdir}/samples/${meta.sample_id}/reports" },
            mode: params.publish_dir_mode,
            enabled: true,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]
    }
    withName: 'HELPER_VSEARCH_MULTIQC|HELPER_DADA_MULTIQC|HELPER_ASSIGNEMENT_MULTIQC|HELPER_BENCHMARK' {
        publishDir = [
            path: { "${params.outdir}/reports" },
            mode: params.publish_dir_mode,
            enabled: false,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]
    }
    withName: 'HELPER_VSEARCH_STATS|HELPER_DADA_STATS' {
        publishDir = [
            path: { "${params.outdir}/samples/${meta.sample_id}/reports" },
            mode: params.publish_dir_mode,
            enabled: false,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]
    }
    withName: HELPER_KRONA_TABLE {
        publishDir = [
            path: { "${params.outdir}/samples/${meta.sample_id}/reports" },
            mode: params.publish_dir_mode,
            enabled: false,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]
    }
    withName: HELPER_FILTER_TAXONOMY {
        publishDir = [
            path: { "${params.outdir}/blast" },
            mode: params.publish_dir_mode,
            enabled: true,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]
    }
    withName: BLAST_BLASTN {
        ext.args = [
            "-task 'megablast'", 
            "-evalue ${params.blast_evalue}",
            "-perc_identity ${params.blast_perc_id}",
            "-qcov_hsp_perc ${params.blast_qcov}",
            "-outfmt '6 qseqid sseqid evalue pident bitscore sacc staxid length mismatch gaps sscinames'",
            params.disable_low_complexity ? "${params.blast_low_complexity}" : ''
        ].join(' ')
        publishDir = [
            path: { "${params.outdir}/samples/${meta.sample_id}/blast" },
            mode: params.publish_dir_mode,
            enabled: false,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]
    }
    withName: HELPER_BLAST_FILTER_BITSCORE {
        ext.args = "--bit_diff ${params.blast_bitscore_diff}"
        publishDir = [
            path: { "${params.outdir}/samples/${meta.sample_id}/blast" },
            mode: params.publish_dir_mode,
            enabled: true,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]
    }
    withName: HELPER_FIND_CONSENSUS {
        publishDir = [
            path: { "${params.outdir}/samples/${meta.sample_id}/blast/" },
            mode: params.publish_dir_mode,
            enabled: true,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]
    }
    withName: HELPER_BLAST_STATS {
        publishDir = [
            path: { "${params.outdir}/samples/${meta.sample_id}/reports/"},
            mode: params.publish_dir_mode,
            enabled: true,
            saveAs: { filename -> filenmae.equals('versions.yml') ? null : filename}
        ]
    }
    withName: HELPER_SAMPLE_COMPO {
        publishDir = [
            path: { "${params.outdir}/samples/${meta.sample_id}/reports/"},
            mode: params.publish_dir_mode,
            enabled: true,
            saveAs: { filename -> filenmae.equals('versions.yml') ? null : filename}
        ]
    }
    withName: 'HELPER_CREATE_BLAST_MASK|HELPER_BLAST_APPLY_BLOCKLIST' {
        publishDir = [
            path: { "${params.outdir}/blast/" },
            mode: params.publish_dir_mode,
            enabled: true,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]
    }
    withName: 'HELPER_REPORT_XLSX|KRONA_HTML|HELPER_BENCHMARK_XLSX' {
        publishDir = [
            path: { "${params.outdir}/reports/" },
            mode: params.publish_dir_mode,
            enabled: true,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]
    }
    withName: CUTADAPT {
        ext.args = params.cutadapt_options
        publishDir = [
            path: { "${params.outdir}/cutadapt" },
            mode: params.publish_dir_mode,
            enabled: params.store_reads,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ] 
    }
    withName: FASTP {
        ext.args = "-n 0 -l 40"
        publishDir = [
            path: { "${params.outdir}/FASTP" },
            mode: params.publish_dir_mode,
            enabled: false
        ]
    }
    withName: FASTX_REVERSE_COMPLEMENT {
        publishDir = [
            path: { "${params.outdir}/cutadapt" },
            mode: params.publish_dir_mode,
            enabled: false,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]
    }
    withName: NANOFILT {
        ext.args = "--maxlength ${params.amplicon_max_length} -l ${params.amplicon_min_length} -q ${params.reads_min_q}"
        publishDir = [
            path: { "${params.outdir}/samples/${meta.sample_id}/nanofilt" },
            mode: params.publish_dir_mode,
            enabled: true,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]
    }
    withName: NANOPLOT {
        publishDir = [
            path: { "${params.outdir}/samples/${meta.sample_id}/qc/nanoplot" },
            mode: params.publish_dir_mode,
            enabled: true,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]
    }
    withName: CUSTOM_DUMPSOFTWAREVERSIONS {
        publishDir = [
            path: { "${params.outdir}/custom" },
            mode: params.publish_dir_mode,
            enabled: false
        ]
    }
    withName: MULTIQC {
        publishDir = [
            path: { "${params.outdir}/reports" },
            mode: params.publish_dir_mode,
            enabled: true,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]
    }

}